
# coding: utf-8

# In[ ]:

# # When Jupyter notebook Kernel Restart code

# from IPython.display import display_html
# def restartkernel() :
#     display_html("<script>Jupyter.notebook.kernel.restart()</script>",raw=True)
# restartkernel()


# In[1]:

import os
from glob import glob
import shutil
import itertools
from datetime import datetime
from tqdm import tqdm_notebook
from datetime import datetime
import pandas as pd
import random

import seaborn as sns
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt

from keras.models import Model, load_model
import tensorflow as tf
from tensorflow.keras import layers
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import tensorflow.keras.backend as K
from keras.regularizers import l1, l2


# from keras.layers import BatchNormalization, Conv2D, Activation, Dense, GlobalAveragePooling2D,
# from keras.layers import MaxPooling2D, ZeroPadding2D, AveragePooling2D

get_ipython().magic('matplotlib inline')


# ## 경로 설정

# In[2]:

seed_value= 777

random.seed(seed_value)
np.random.seed(seed_value)
tf.set_random_seed(seed_value)


# In[3]:

# set file path

data_dir1 = 'Dataset/JPG/'

dir_list1 = ['copper','hot','jet_rv','RdBu_rv']

test_dir_list = []
test_path_list = []

for i in dir_list1:
    test_dir = data_dir1+'22_AOI_HDI_dim1_Gvis_'+i+'_Cls/'+ 'Test/'
    test_dir_list.append(test_dir)
    test_path = glob(os.path.join(test_dir,'*/*.jpg'))
    test_path_list.append(test_path)
    print(data_dir1+" : "+str(i))

data_dir2 = 'Dataset/'

dir_list2 = ['copper','hot','hot_rv','RdBu_rv']

for i in dir_list2:
    test_dir = data_dir2+'22_AOI_HDI_dim1_Gvis_'+i+'_Cls/'+ 'Test/'
    test_dir_list.append(test_dir)
    test_path = glob(os.path.join(test_dir,'*/*.png'))
    test_path_list.append(test_path)
    print(data_dir2+" : "+str(i))

test_dir  = data_dir2+'22_AOI_HDI_dim1_Gvis_Class/Test/'
test_dir_list.append(test_dir)
test_path = glob(os.path.join(test_dir,'*/*.*'))
test_path_list.append(test_path)
print(data_dir2+" : origin")


# In[5]:

# Hyper parameter

batch_size = 32
num_classes = len(os.listdir(test_dir_list[0]))
data_augmentation = True
learning_rate = 0.001

num_testset = len(test_path_list[0])
steps_per_validation = num_testset // batch_size

print('batch_size   : ',batch_size)
print('num_classes  : ',num_classes)
print('learning_rate        : ',learning_rate)
print('steps_per_validation : ',steps_per_validation)


# In[6]:

# image loading (color)

path_1 = test_path_list[0][0]
image = np.array(Image.open(path_1))  # color : RGB, gray : L, YCbCr, LAB, HSV, 1

print('num_classes  : ',num_classes)
print('Test_dataset : ',num_testset)
print('image.shape  : ',image.shape)

input_shape = image.shape
h, w, c = input_shape

plt.imshow(image)
plt.show()


# In[8]:

# model define (Xception)

model_list = []

for i in tqdm_notebook(range(len(test_dir_list)-1)):
    base_model = tf.keras.applications.xception.Xception(weights=None, input_shape=input_shape, include_top=False, classes=num_classes)
    net = base_model.output
    net = layers.GlobalAveragePooling2D()(net)
    net = layers.Flatten()(net)
    net = layers.Dense(1024, activation='relu', kernel_regularizer=l2(0.001))(net)
    net = layers.Dense(512, activation='relu', kernel_regularizer=l2(0.001))(net)
    net = layers.Dropout(0.5)(net)
    net = layers.Dense(num_classes, activation='softmax', name='fc1000')(net)
    model_list.append(tf.keras.Model(inputs=base_model.input, outputs=net))
print('Done')


# In[10]:

# validation data generator

validation_datagen = ImageDataGenerator(rescale=1./255)
validation_generator = []

for i in range(len(test_dir_list)-1):
    validation = validation_datagen.flow_from_directory(
        test_dir_list[i],
        target_size=(h, w),
        color_mode='rgb',
        batch_size=batch_size,
        class_mode='categorical')
    validation_generator.append(validation)
    print('    →',test_dir_list[i])
print(len(test_dir_list)-1,'validation dataset ready.')


# In[19]:

# Model path check

MODEL_PATH = 'Model\\Ensenble6/'
MODEL_PATHs = glob(os.path.join(MODEL_PATH,'*.hdf5'))

# Model loading & compile

for i in range(len(model_list)):
    model_list[i].load_weights(MODEL_PATHs[i])
    model_list[i].compile(loss='categorical_crossentropy',optimizer=tf.keras.optimizers.Adam(learning_rate),metrics=['accuracy'])
    print('loading, compiled. ',MODEL_PATHs[i])
print('Done')


# In[20]:

# Model validation

validation_result = []

for i in range(len(model_list)):
    print(' ■ validation : ',MODEL_PATHs[i])
    result = model_list[i].evaluate_generator(validation_generator[i], steps=10, verbose=0)
    validation_result.append(result)
    print(result)
print('Done')


# In[21]:

# test data generator

test_datagen = ImageDataGenerator(rescale=1./255)
test_generator = []

for i in range(len(test_dir_list)):
    test_data = (test_datagen.flow_from_directory(
        test_dir_list[i],
        target_size=(h, w),
        color_mode='rgb',
        batch_size=len(test_path_list[i]),
        class_mode='categorical',
        shuffle=False))
    test_generator.append(test_data)
    print('    →',test_dir_list[i])
print(len(test_dir_list),'test dataset ready.')


# In[22]:

# test image, label loading & check

image_list = []
label_list = []
for test_iter in tqdm_notebook(test_generator):
    image, label = next(test_iter)
    image_list.append(image)
    label_list.append(label)
print('test data loaded.')
print('image.shape : ', image_list[0].shape)
print('label.shape : ', label_list[0].shape)
plt.imshow(image_list[0][0])
plt.show()


# In[23]:

# Predict image

predict_list = []

for i in tqdm_notebook(range(len(test_generator)-1)):
    pre = model_list[i].predict(image_list[i])
    predict_list.append(pre)
print('test image prediction completed.')


# In[91]:

# make confusion matrix array

from sklearn.metrics import confusion_matrix

array_list =[]
c_label = os.listdir(test_dir_list[0])
cmap_list = ['jpg_copper','jpg_hot','jpg_jet_rv','jpg_RdBu_rv','png_copper','png_hot','png_hot_rv','png_RdBu_rv']

for i in range(len(test_dir_list)-1):
    ar_result = confusion_matrix(np.argmax(label_list[i], -1), np.argmax(predict_list[i] , -1))
    array_list.append(ar_result)
print('make array.')

for i in range(len(test_dir_list)-1):
    pd_label = pd.DataFrame(label_list[i])
    pd_label.columns = c_label
    
    pd_pred  = pd.DataFrame(predict_list[i])
    pd_pred.columns = c_label
    
    pd_array = pd.DataFrame(array_list[i])
    pd_array.columns = c_label
    pd_array.index = c_label
    
    path_pd_label = MODEL_PATH+'Log'+str(i)+'_'+cmap_list[i]+'_label.csv'
    path_pd_pred  = MODEL_PATH+'Log'+str(i)+'_'+cmap_list[i]+'_pred.csv'
    path_pd_array = MODEL_PATH+'Log'+str(i)+'_'+cmap_list[i]+'_conf.csv'
    
    pd_label.to_csv(path_pd_label, index = True)
    pd_pred.to_csv (path_pd_pred,  index = True)
    pd_array.to_csv(path_pd_array, index = True)
print('pd.csv files printed.')


# In[100]:

# Error image check

cmap_no = 7

color_maps = ['copper','hot','jet','RdBu','copper','hot','hot','RdBu']
reverse    = [0,0,1,1,0,0,1,1]

cmaps = color_maps[cmap_no]
rv    = reverse[cmap_no]
label = label_list[cmap_no]
pre   = predict_list[cmap_no]
image = image_list[cmap_no]
org_img = image_list[-1]

Error_result = []
result = []
pre_value = []

# pick Error image No
print('[Error files]')
for i in range(len(test_path_list[0])):
    if np.argmax(label[i])<17 and np.argmax(pre[i]) >=17:
        result = i
    else:
        continue
        
    Error_result.append(result)
    print(test_path_list[cmap_no][i])
    
print('')
print('[Error image]',len(Error_result),'images',Error_result)


# View Error image No
num_image = len(Error_result)
num_col = 8
a = num_image // num_col
if a==0:
    a = 1
plt.figure(figsize = (24, 10))

for i in range (num_image):
    plt.subplot(a, num_col,i+1)
    plt.title('No. '+str(Error_result[i])
              +', lbl : '+ str(np.argmax(label[Error_result[i]],-1))
              +', pre : ' + str(np.argmax(pre[Error_result[i]],-1)))
    if rv == 1 :
        plt.imshow(256-image[Error_result[i], :, :,0], cmap = cmaps)
    else:
        plt.imshow(image[Error_result[i], :, :,0], cmap = cmaps)
plt.show()

print('[Origin image]')
plt.figure(figsize = (24, 10))
# View origin image No
for i in range (num_image):
    plt.subplot(a, num_col,i+1)
    plt.title('No. '+str(Error_result[i])
              +', label : '+ str(np.argmax(label[Error_result[i]],-1)))
    plt.imshow(org_img[Error_result[i], :, :,0], cmap='gray')
plt.show()


# In[26]:

# View confusion

pd_array = pd.DataFrame(array_list[cmap_no])
pd_array.columns = c_label
pd_array.index = c_label

plt.figure(figsize = (12,8))
sns.heatmap(pd_array, annot=True, cmap="GnBu", fmt="d", linewidths=2)
plt.show()


# In[103]:

# print predict_Error_value

pd_value = pd.DataFrame()

for cm in range(len(test_dir_list)-1):
    label = label_list[cm]
    pre   = predict_list[cm]
    for i in range(len(test_path_list[0])):
        if np.argmax(label[i])<17 and np.argmax(pre[i]) >=17:
            value_L = pd.DataFrame(label[i].astype('str')).transpose()
            value_L.index = [cmap_list[cm]+'_label.'+str(i)]
            value_L.insert(0,'No.',np.argmax(label[i]))
            
            pd_value = pd.concat([pd_value, value_L])
            
            value_E = pd.DataFrame(pre[i].round(3)).transpose()
            value_E.index = [cmap_list[cm]+'_pred.'+str(i)]
            value_E.insert(0,'No.',np.argmax(pre[i]))
            pd_value = pd.concat([pd_value, value_E])
        else:
            continue
            
pd.set_option('display.max_columns', 50)
# pd.options.display.float_format = '{:.4f}'.format
pd_c_label = os.listdir(test_dir_list[0])
pd_c_label.insert(0,'No.')
pd_value.columns = pd_c_label

path_pd_value = MODEL_PATH+'predict_Error_value.csv'
pd_value.to_csv(path_pd_value, index = True)
print('predict_Error_value.csv files printed.')


# In[104]:

pd_value


# In[ ]:




# In[ ]:




# ## 일단 여기까지

# In[ ]:




# In[ ]:

for i in range(2130):
    print(np.argmax(label_copper[i]))


# In[ ]:

label_result = []
for i in range(2130):
    if np.argmax(label_copper[i])<17:
        result = 'NG'
    else:
        result = 'OK'
    label_result.append(result)
print(label_result)


# In[ ]:




# In[ ]:

np.argmax(pre_copper[0])<17


# In[ ]:




# In[ ]:

pre_result = []
for i in range(2130):
    if np.argmax(pre_copper[i])<17:
        result = 'NG'
    else:
        result = 'OK'
    pre_result.append(result)
print(pre_result)


# In[ ]:

test.astype(int)


# In[ ]:

test = np.around(pre_copper[:30],)
test.astype(int)


# In[ ]:




# In[ ]:

if StrategyName == “Voting” then
    if ADCCode1 == “156” or ADCCode2 == “156”
        ADCCode == “156”
    elif ADCCode1 == ADCCode2 then
        ADCCode = ADCCode2
    else
        if     (ADCCode1=="201" and (ADCCode2=="202" or ADCCode2=="203" or ADCCode2=="204" or ADCCode2=="205" or ADCCode2=="206" or ADCCode2=="207" or ADCCode2=="208"))
            or (ADCCode1=="202" and (ADCCode2=="201" or ADCCode2=="203" or ADCCode2=="204" or ADCCode2=="205" or ADCCode2=="206" or ADCCode2=="207" or ADCCode2=="208"))
            or (ADCCode1=="203" and (ADCCode2=="201" or ADCCode2=="202" or ADCCode2=="204" or ADCCode2=="205" or ADCCode2=="206" or ADCCode2=="207" or ADCCode2=="208"))
            or (ADCCode1=="204" and (ADCCode2=="201" or ADCCode2=="202" or ADCCode2=="203" or ADCCode2=="205" or ADCCode2=="206" or ADCCode2=="207" or ADCCode2=="208"))
            or (ADCCode1=="205" and (ADCCode2=="201" or ADCCode2=="202" or ADCCode2=="203" or ADCCode2=="204" or ADCCode2=="206" or ADCCode2=="207" or ADCCode2=="208"))
            or (ADCCode1=="206" and (ADCCode2=="201" or ADCCode2=="202" or ADCCode2=="203" or ADCCode2=="204" or ADCCode2=="205" or ADCCode2=="207" or ADCCode2=="208")) then

            if CodePredict1 < = CodePredict2 then
                ADCCode = ADCCode2
            else
                ADCCode = ADCCode1
        elif ADCCode1=="201" or ADCCode1=="202" or ADCCode1=="203" or ADCCode1=="204" or ADCCode1=="205" or ADCCode1=="206" or ADCCode1=="207" or ADCCode1=="208" then
            ADCCode = ADCCode2
        elif ADCCode2=="201" or ADCCode2=="202" or ADCCode2=="203" or ADCCode2=="204" or ADCCode2=="205" or ADCCode2=="206" or ADCCode2=="207" or ADCCode2=="208" then
            ADCCode = ADCCode1
        else
            if CodePredict1 < = CodePredict2 then
                ADCCode = ADCCode2
            else
                ADCCode = ADCCode1


# In[ ]:




# In[ ]:




# In[ ]:




# In[ ]:




# In[ ]:




# In[ ]:

# ref.
# 반올림 : np.around(test)
# int형 : test.astype(np.int)


# In[ ]:




# In[ ]:




# In[ ]:



